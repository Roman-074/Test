git init - инициализация проекта (создание репозитория) в конкретной папке

ls -a - настройка отображения скрытой папки .git
ls - вывод в командную строку содержимого дериктории
clear - очистка окна консоли

git add * - индексируем все новые файлы
git add . - индексируем файлы текущей директории

gitk - вызов графического интерфейса отображения истории коммитов


git log - просмотр истории коммитов в консоли
git log --pretty=oneline - вывод коммитов в одну строку (если коммитов много, то выведутся не все)
git log --max-count=3 - вывод только последних трех коммитов
git log --all - вывод всех коммитов
git log --author="имя автора" - вывод коммитов определенного автора

git log --pretty=format:" %h - %s : %ad [ %an ] " --date=short

%h - короткая версия хэша
%s - комментарий коммита
%ad - дата, когда был выведен коммит
%an - имя автора коммита
--date=short - короткая запись даты для простоты восприятия

git checkout [хэш коммита] - временный откат к определенному коммиту, который становится последним в данной ветке (коммит указывается хэш-кодом)
или перемещение просмотра итории к данному коммиту


git reset HEAD [имя файла] - возврат состояния файла к тому моменту, когда в него еще не были внесены изменения (отмена индексации)
вместо HEAD можно написать любой из коммитов, указав его хэш, и отменить все изменения после этого коммита

Последовательность действий для отмены изменений: git reset [хэш коммита] >>> git checkout [хэш коммита]
Сначала снимается индексация файла, затем идет возврат к посленему коммиту

git revert HEAD --no-edit - отмена коммита (удаление последнего коммита) могут возникать конфликты 
git revert --abort  -  отмена попытки отката (при отмене отката пропадает и ошибка, которая могла возникнуть при откате)

Если конфликт возникает во время revert, то будет высвечиваться команда git revert --continue
Основной посыл при исправлении конфликтов - привести файлы к тому виду, который нам нужен, и сообщить git'у что конфликт исправлен


git checkout -b [имя ветки] - создание новой ветки 

git merge [имя ветки] - слияние текущей ветки с указанной в команде в порядке последовательности истории коммитов //1234
git rebase [имя ветки] - слияние указанной в команде ветки поверх текущей (стек) //2413
***rebase рекомендуется использовать только для редактирования своих локальных веток
***merge - для работы в общей веткке с другими разработчиками

При слиянии веток также может может возникнуть конфликт - в данном случае нужно либо отменить merge, либо привести файл к нужно виду и сделать коммит



git clone ссылка - копирование проекта с удаленного репозитория в текущую директорию


git remote add origin ссылка - доабавление удаленного репозитория в наш локальный

git push -u origin master - загрузка изменений на удаленный репозиторий с локального











